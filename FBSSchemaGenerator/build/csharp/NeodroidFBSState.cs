// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Neodroid.FBS.State
{

using global::System;
using global::FlatBuffers;

public struct FState : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FState GetRootAsFState(ByteBuffer _bb) { return GetRootAsFState(_bb, new FState()); }
  public static FState GetRootAsFState(ByteBuffer _bb, FState obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool FStateBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "STAT"); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string EnvironmentName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEnvironmentNameBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetEnvironmentNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetEnvironmentNameArray() { return __p.__vector_as_array<byte>(4); }
  public int FrameNumber { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Observables(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int ObservablesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObservablesBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetObservablesBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public float[] GetObservablesArray() { return __p.__vector_as_array<float>(8); }
  public Neodroid.FBS.FUnobservables? Unobservables { get { int o = __p.__offset(10); return o != 0 ? (Neodroid.FBS.FUnobservables?)(new Neodroid.FBS.FUnobservables()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float Signal { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool Terminated { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string TerminationReason { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTerminationReasonBytes() { return __p.__vector_as_span(16); }
#else
  public ArraySegment<byte>? GetTerminationReasonBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetTerminationReasonArray() { return __p.__vector_as_array<byte>(16); }
  public FEnvironmentDescription? EnvironmentDescription { get { int o = __p.__offset(18); return o != 0 ? (FEnvironmentDescription?)(new FEnvironmentDescription()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Neodroid.FBS.Reaction.FReaction? LastReaction { get { int o = __p.__offset(20); return o != 0 ? (Neodroid.FBS.Reaction.FReaction?)(new Neodroid.FBS.Reaction.FReaction()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string ExtraSerialisedMessage { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExtraSerialisedMessageBytes() { return __p.__vector_as_span(22); }
#else
  public ArraySegment<byte>? GetExtraSerialisedMessageBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetExtraSerialisedMessageArray() { return __p.__vector_as_array<byte>(22); }

  public static Offset<FState> CreateFState(FlatBufferBuilder builder,
      StringOffset environment_nameOffset = default(StringOffset),
      int frame_number = 0,
      VectorOffset observablesOffset = default(VectorOffset),
      Offset<Neodroid.FBS.FUnobservables> unobservablesOffset = default(Offset<Neodroid.FBS.FUnobservables>),
      float signal = 0.0f,
      bool terminated = false,
      StringOffset termination_reasonOffset = default(StringOffset),
      Offset<FEnvironmentDescription> environment_descriptionOffset = default(Offset<FEnvironmentDescription>),
      Offset<Neodroid.FBS.Reaction.FReaction> last_reactionOffset = default(Offset<Neodroid.FBS.Reaction.FReaction>),
      StringOffset extra_serialised_messageOffset = default(StringOffset)) {
    builder.StartObject(10);
    FState.AddExtraSerialisedMessage(builder, extra_serialised_messageOffset);
    FState.AddLastReaction(builder, last_reactionOffset);
    FState.AddEnvironmentDescription(builder, environment_descriptionOffset);
    FState.AddTerminationReason(builder, termination_reasonOffset);
    FState.AddSignal(builder, signal);
    FState.AddUnobservables(builder, unobservablesOffset);
    FState.AddObservables(builder, observablesOffset);
    FState.AddFrameNumber(builder, frame_number);
    FState.AddEnvironmentName(builder, environment_nameOffset);
    FState.AddTerminated(builder, terminated);
    return FState.EndFState(builder);
  }

  public static void StartFState(FlatBufferBuilder builder) { builder.StartObject(10); }
  public static void AddEnvironmentName(FlatBufferBuilder builder, StringOffset environmentNameOffset) { builder.AddOffset(0, environmentNameOffset.Value, 0); }
  public static void AddFrameNumber(FlatBufferBuilder builder, int frameNumber) { builder.AddInt(1, frameNumber, 0); }
  public static void AddObservables(FlatBufferBuilder builder, VectorOffset observablesOffset) { builder.AddOffset(2, observablesOffset.Value, 0); }
  public static VectorOffset CreateObservablesVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateObservablesVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartObservablesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUnobservables(FlatBufferBuilder builder, Offset<Neodroid.FBS.FUnobservables> unobservablesOffset) { builder.AddOffset(3, unobservablesOffset.Value, 0); }
  public static void AddSignal(FlatBufferBuilder builder, float signal) { builder.AddFloat(4, signal, 0.0f); }
  public static void AddTerminated(FlatBufferBuilder builder, bool terminated) { builder.AddBool(5, terminated, false); }
  public static void AddTerminationReason(FlatBufferBuilder builder, StringOffset terminationReasonOffset) { builder.AddOffset(6, terminationReasonOffset.Value, 0); }
  public static void AddEnvironmentDescription(FlatBufferBuilder builder, Offset<FEnvironmentDescription> environmentDescriptionOffset) { builder.AddOffset(7, environmentDescriptionOffset.Value, 0); }
  public static void AddLastReaction(FlatBufferBuilder builder, Offset<Neodroid.FBS.Reaction.FReaction> lastReactionOffset) { builder.AddOffset(8, lastReactionOffset.Value, 0); }
  public static void AddExtraSerialisedMessage(FlatBufferBuilder builder, StringOffset extraSerialisedMessageOffset) { builder.AddOffset(9, extraSerialisedMessageOffset.Value, 0); }
  public static Offset<FState> EndFState(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // environment_name
    return new Offset<FState>(o);
  }
  public static void FinishFStateBuffer(FlatBufferBuilder builder, Offset<FState> offset) { builder.Finish(offset.Value, "STAT"); }
  public static void FinishSizePrefixedFStateBuffer(FlatBufferBuilder builder, Offset<FState> offset) { builder.FinishSizePrefixed(offset.Value, "STAT"); }

  public static VectorOffset CreateSortedVectorOfFState(FlatBufferBuilder builder, Offset<FState>[] offsets) {
    Array.Sort(offsets, (Offset<FState> o1, Offset<FState> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static FState? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new FState().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};

public struct FEnvironmentDescription : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FEnvironmentDescription GetRootAsFEnvironmentDescription(ByteBuffer _bb) { return GetRootAsFEnvironmentDescription(_bb, new FEnvironmentDescription()); }
  public static FEnvironmentDescription GetRootAsFEnvironmentDescription(ByteBuffer _bb, FEnvironmentDescription obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FEnvironmentDescription __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FObjective? Objective { get { int o = __p.__offset(4); return o != 0 ? (FObjective?)(new FObjective()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public FObjective? AvailableObjectives(int j) { int o = __p.__offset(6); return o != 0 ? (FObjective?)(new FObjective()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AvailableObjectivesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public FActor? Actors(int j) { int o = __p.__offset(8); return o != 0 ? (FActor?)(new FActor()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ActorsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public FActor? ActorsByKey(string key) { int o = __p.__offset(8); return o != 0 ? FActor.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }
  public FConfigurable? Configurables(int j) { int o = __p.__offset(10); return o != 0 ? (FConfigurable?)(new FConfigurable()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ConfigurablesLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public FConfigurable? ConfigurablesByKey(string key) { int o = __p.__offset(10); return o != 0 ? FConfigurable.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }
  public FSensor? Sensors(int j) { int o = __p.__offset(12); return o != 0 ? (FSensor?)(new FSensor()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SensorsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public FSensor? SensorsByKey(string key) { int o = __p.__offset(12); return o != 0 ? FSensor.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }

  public static Offset<FEnvironmentDescription> CreateFEnvironmentDescription(FlatBufferBuilder builder,
      Offset<FObjective> objectiveOffset = default(Offset<FObjective>),
      VectorOffset available_objectivesOffset = default(VectorOffset),
      VectorOffset actorsOffset = default(VectorOffset),
      VectorOffset configurablesOffset = default(VectorOffset),
      VectorOffset sensorsOffset = default(VectorOffset)) {
    builder.StartObject(5);
    FEnvironmentDescription.AddSensors(builder, sensorsOffset);
    FEnvironmentDescription.AddConfigurables(builder, configurablesOffset);
    FEnvironmentDescription.AddActors(builder, actorsOffset);
    FEnvironmentDescription.AddAvailableObjectives(builder, available_objectivesOffset);
    FEnvironmentDescription.AddObjective(builder, objectiveOffset);
    return FEnvironmentDescription.EndFEnvironmentDescription(builder);
  }

  public static void StartFEnvironmentDescription(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddObjective(FlatBufferBuilder builder, Offset<FObjective> objectiveOffset) { builder.AddOffset(0, objectiveOffset.Value, 0); }
  public static void AddAvailableObjectives(FlatBufferBuilder builder, VectorOffset availableObjectivesOffset) { builder.AddOffset(1, availableObjectivesOffset.Value, 0); }
  public static VectorOffset CreateAvailableObjectivesVector(FlatBufferBuilder builder, Offset<FObjective>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAvailableObjectivesVectorBlock(FlatBufferBuilder builder, Offset<FObjective>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAvailableObjectivesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddActors(FlatBufferBuilder builder, VectorOffset actorsOffset) { builder.AddOffset(2, actorsOffset.Value, 0); }
  public static VectorOffset CreateActorsVector(FlatBufferBuilder builder, Offset<FActor>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateActorsVectorBlock(FlatBufferBuilder builder, Offset<FActor>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartActorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddConfigurables(FlatBufferBuilder builder, VectorOffset configurablesOffset) { builder.AddOffset(3, configurablesOffset.Value, 0); }
  public static VectorOffset CreateConfigurablesVector(FlatBufferBuilder builder, Offset<FConfigurable>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateConfigurablesVectorBlock(FlatBufferBuilder builder, Offset<FConfigurable>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartConfigurablesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSensors(FlatBufferBuilder builder, VectorOffset sensorsOffset) { builder.AddOffset(4, sensorsOffset.Value, 0); }
  public static VectorOffset CreateSensorsVector(FlatBufferBuilder builder, Offset<FSensor>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSensorsVectorBlock(FlatBufferBuilder builder, Offset<FSensor>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSensorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FEnvironmentDescription> EndFEnvironmentDescription(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FEnvironmentDescription>(o);
  }
};

public struct FObjective : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FObjective GetRootAsFObjective(ByteBuffer _bb) { return GetRootAsFObjective(_bb, new FObjective()); }
  public static FObjective GetRootAsFObjective(ByteBuffer _bb, FObjective obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FObjective __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ObjectiveName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObjectiveNameBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetObjectiveNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetObjectiveNameArray() { return __p.__vector_as_array<byte>(4); }
  public int MaxEpisodeLength { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Neodroid.FBS.FRange? SignalSpace { get { int o = __p.__offset(8); return o != 0 ? (Neodroid.FBS.FRange?)(new Neodroid.FBS.FRange()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartFObjective(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddObjectiveName(FlatBufferBuilder builder, StringOffset objectiveNameOffset) { builder.AddOffset(0, objectiveNameOffset.Value, 0); }
  public static void AddMaxEpisodeLength(FlatBufferBuilder builder, int maxEpisodeLength) { builder.AddInt(1, maxEpisodeLength, 0); }
  public static void AddSignalSpace(FlatBufferBuilder builder, Offset<Neodroid.FBS.FRange> signalSpaceOffset) { builder.AddStruct(2, signalSpaceOffset.Value, 0); }
  public static Offset<FObjective> EndFObjective(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FObjective>(o);
  }
};

public struct FConfigurable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FConfigurable GetRootAsFConfigurable(ByteBuffer _bb) { return GetRootAsFConfigurable(_bb, new FConfigurable()); }
  public static FConfigurable GetRootAsFConfigurable(ByteBuffer _bb, FConfigurable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FConfigurable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ConfigurableName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetConfigurableNameBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetConfigurableNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetConfigurableNameArray() { return __p.__vector_as_array<byte>(4); }
  public FObservation ConfigurableValueType { get { int o = __p.__offset(6); return o != 0 ? (FObservation)__p.bb.Get(o + __p.bb_pos) : FObservation.NONE; } }
  public TTable? ConfigurableValue<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }
  public Neodroid.FBS.FRange? ConfigurableRange { get { int o = __p.__offset(10); return o != 0 ? (Neodroid.FBS.FRange?)(new Neodroid.FBS.FRange()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartFConfigurable(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddConfigurableName(FlatBufferBuilder builder, StringOffset configurableNameOffset) { builder.AddOffset(0, configurableNameOffset.Value, 0); }
  public static void AddConfigurableValueType(FlatBufferBuilder builder, FObservation configurableValueType) { builder.AddByte(1, (byte)configurableValueType, 0); }
  public static void AddConfigurableValue(FlatBufferBuilder builder, int configurableValueOffset) { builder.AddOffset(2, configurableValueOffset, 0); }
  public static void AddConfigurableRange(FlatBufferBuilder builder, Offset<Neodroid.FBS.FRange> configurableRangeOffset) { builder.AddStruct(3, configurableRangeOffset.Value, 0); }
  public static Offset<FConfigurable> EndFConfigurable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // configurable_name
    builder.Required(o, 10);  // configurable_range
    return new Offset<FConfigurable>(o);
  }

  public static VectorOffset CreateSortedVectorOfFConfigurable(FlatBufferBuilder builder, Offset<FConfigurable>[] offsets) {
    Array.Sort(offsets, (Offset<FConfigurable> o1, Offset<FConfigurable> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static FConfigurable? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new FConfigurable().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};

public struct FActor : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FActor GetRootAsFActor(ByteBuffer _bb) { return GetRootAsFActor(_bb, new FActor()); }
  public static FActor GetRootAsFActor(ByteBuffer _bb, FActor obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FActor __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ActorName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActorNameBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetActorNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetActorNameArray() { return __p.__vector_as_array<byte>(4); }
  public bool Alive { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public FActuator? Actuators(int j) { int o = __p.__offset(8); return o != 0 ? (FActuator?)(new FActuator()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ActuatorsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public FActuator? ActuatorsByKey(string key) { int o = __p.__offset(8); return o != 0 ? FActuator.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }

  public static Offset<FActor> CreateFActor(FlatBufferBuilder builder,
      StringOffset actor_nameOffset = default(StringOffset),
      bool alive = false,
      VectorOffset actuatorsOffset = default(VectorOffset)) {
    builder.StartObject(3);
    FActor.AddActuators(builder, actuatorsOffset);
    FActor.AddActorName(builder, actor_nameOffset);
    FActor.AddAlive(builder, alive);
    return FActor.EndFActor(builder);
  }

  public static void StartFActor(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddActorName(FlatBufferBuilder builder, StringOffset actorNameOffset) { builder.AddOffset(0, actorNameOffset.Value, 0); }
  public static void AddAlive(FlatBufferBuilder builder, bool alive) { builder.AddBool(1, alive, false); }
  public static void AddActuators(FlatBufferBuilder builder, VectorOffset actuatorsOffset) { builder.AddOffset(2, actuatorsOffset.Value, 0); }
  public static VectorOffset CreateActuatorsVector(FlatBufferBuilder builder, Offset<FActuator>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateActuatorsVectorBlock(FlatBufferBuilder builder, Offset<FActuator>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartActuatorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FActor> EndFActor(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // actor_name
    return new Offset<FActor>(o);
  }

  public static VectorOffset CreateSortedVectorOfFActor(FlatBufferBuilder builder, Offset<FActor>[] offsets) {
    Array.Sort(offsets, (Offset<FActor> o1, Offset<FActor> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static FActor? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new FActor().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};

public struct FActuator : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FActuator GetRootAsFActuator(ByteBuffer _bb) { return GetRootAsFActuator(_bb, new FActuator()); }
  public static FActuator GetRootAsFActuator(ByteBuffer _bb, FActuator obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FActuator __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ActuatorName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActuatorNameBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetActuatorNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetActuatorNameArray() { return __p.__vector_as_array<byte>(4); }
  public Neodroid.FBS.FRange? ActuatorRange { get { int o = __p.__offset(6); return o != 0 ? (Neodroid.FBS.FRange?)(new Neodroid.FBS.FRange()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartFActuator(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddActuatorName(FlatBufferBuilder builder, StringOffset actuatorNameOffset) { builder.AddOffset(0, actuatorNameOffset.Value, 0); }
  public static void AddActuatorRange(FlatBufferBuilder builder, Offset<Neodroid.FBS.FRange> actuatorRangeOffset) { builder.AddStruct(1, actuatorRangeOffset.Value, 0); }
  public static Offset<FActuator> EndFActuator(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // actuator_name
    builder.Required(o, 6);  // actuator_range
    return new Offset<FActuator>(o);
  }

  public static VectorOffset CreateSortedVectorOfFActuator(FlatBufferBuilder builder, Offset<FActuator>[] offsets) {
    Array.Sort(offsets, (Offset<FActuator> o1, Offset<FActuator> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static FActuator? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new FActuator().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};

public struct FSensor : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FSensor GetRootAsFSensor(ByteBuffer _bb) { return GetRootAsFSensor(_bb, new FSensor()); }
  public static FSensor GetRootAsFSensor(ByteBuffer _bb, FSensor obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FSensor __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string SensorName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSensorNameBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetSensorNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetSensorNameArray() { return __p.__vector_as_array<byte>(4); }
  public FObservation SensorValueType { get { int o = __p.__offset(6); return o != 0 ? (FObservation)__p.bb.Get(o + __p.bb_pos) : FObservation.NONE; } }
  public TTable? SensorValue<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static Offset<FSensor> CreateFSensor(FlatBufferBuilder builder,
      StringOffset sensor_nameOffset = default(StringOffset),
      FObservation sensor_value_type = FObservation.NONE,
      int sensor_valueOffset = 0) {
    builder.StartObject(3);
    FSensor.AddSensorValue(builder, sensor_valueOffset);
    FSensor.AddSensorName(builder, sensor_nameOffset);
    FSensor.AddSensorValueType(builder, sensor_value_type);
    return FSensor.EndFSensor(builder);
  }

  public static void StartFSensor(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddSensorName(FlatBufferBuilder builder, StringOffset sensorNameOffset) { builder.AddOffset(0, sensorNameOffset.Value, 0); }
  public static void AddSensorValueType(FlatBufferBuilder builder, FObservation sensorValueType) { builder.AddByte(1, (byte)sensorValueType, 0); }
  public static void AddSensorValue(FlatBufferBuilder builder, int sensorValueOffset) { builder.AddOffset(2, sensorValueOffset, 0); }
  public static Offset<FSensor> EndFSensor(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // sensor_name
    return new Offset<FSensor>(o);
  }

  public static VectorOffset CreateSortedVectorOfFSensor(FlatBufferBuilder builder, Offset<FSensor>[] offsets) {
    Array.Sort(offsets, (Offset<FSensor> o1, Offset<FSensor> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static FSensor? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new FSensor().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};


}
