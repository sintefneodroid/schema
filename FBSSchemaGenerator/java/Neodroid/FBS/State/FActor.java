// automatically generated by the FlatBuffers compiler, do not modify

package Neodroid.FBS.State;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FActor extends Table {
  public static FActor getRootAsFActor(ByteBuffer _bb) { return getRootAsFActor(_bb, new FActor()); }
  public static FActor getRootAsFActor(ByteBuffer _bb, FActor obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public FActor __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String actorName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer actorNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public boolean alive() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public FMotor motors(int j) { return motors(new FMotor(), j); }
  public FMotor motors(FMotor obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int motorsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public FMotor motorsByKey(String key) { int o = __offset(8); return o != 0 ? FMotor.__lookup_by_key(__vector(o), key, bb) : null; }

  public static int createFActor(FlatBufferBuilder builder,
      int actor_nameOffset,
      boolean alive,
      int motorsOffset) {
    builder.startObject(3);
    FActor.addMotors(builder, motorsOffset);
    FActor.addActorName(builder, actor_nameOffset);
    FActor.addAlive(builder, alive);
    return FActor.endFActor(builder);
  }

  public static void startFActor(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addActorName(FlatBufferBuilder builder, int actorNameOffset) { builder.addOffset(0, actorNameOffset, 0); }
  public static void addAlive(FlatBufferBuilder builder, boolean alive) { builder.addBoolean(1, alive, false); }
  public static void addMotors(FlatBufferBuilder builder, int motorsOffset) { builder.addOffset(2, motorsOffset, 0); }
  public static int createMotorsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMotorsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endFActor(FlatBufferBuilder builder) {
    int o = builder.endObject();
    builder.required(o, 4);  // actor_name
    return o;
  }

  @Override
  protected int keysCompare(Integer o1, Integer o2, ByteBuffer _bb) { return compareStrings(__offset(4, o1, _bb), __offset(4, o2, _bb), _bb); }

  public static FActor __lookup_by_key(int vectorLocation, String key, ByteBuffer bb) {
    byte[] byteKey = key.getBytes(Table.UTF8_CHARSET.get());
    int span = bb.getInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = __indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = compareStrings(__offset(4, bb.capacity() - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new FActor().__assign(tableOffset, bb);
      }
    }
    return null;
  }
}

