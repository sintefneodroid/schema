// automatically generated by the FlatBuffers compiler, do not modify

package Neodroid.FBS.State;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FOBS extends Table {
  public static FOBS getRootAsFOBS(ByteBuffer _bb) { return getRootAsFOBS(_bb, new FOBS()); }
  public static FOBS getRootAsFOBS(ByteBuffer _bb, FOBS obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public FOBS __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String observationName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer observationNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public byte observationType() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Table observation(Table obj) { int o = __offset(8); return o != 0 ? __union(obj, o) : null; }

  public static int createFOBS(FlatBufferBuilder builder,
      int observation_nameOffset,
      byte observation_type,
      int observationOffset) {
    builder.startObject(3);
    FOBS.addObservation(builder, observationOffset);
    FOBS.addObservationName(builder, observation_nameOffset);
    FOBS.addObservationType(builder, observation_type);
    return FOBS.endFOBS(builder);
  }

  public static void startFOBS(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addObservationName(FlatBufferBuilder builder, int observationNameOffset) { builder.addOffset(0, observationNameOffset, 0); }
  public static void addObservationType(FlatBufferBuilder builder, byte observationType) { builder.addByte(1, observationType, 0); }
  public static void addObservation(FlatBufferBuilder builder, int observationOffset) { builder.addOffset(2, observationOffset, 0); }
  public static int endFOBS(FlatBufferBuilder builder) {
    int o = builder.endObject();
    builder.required(o, 4);  // observation_name
    return o;
  }

  @Override
  protected int keysCompare(Integer o1, Integer o2, ByteBuffer _bb) { return compareStrings(__offset(4, o1, _bb), __offset(4, o2, _bb), _bb); }

  public static FOBS __lookup_by_key(int vectorLocation, String key, ByteBuffer bb) {
    byte[] byteKey = key.getBytes(Table.UTF8_CHARSET.get());
    int span = bb.getInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = __indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = compareStrings(__offset(4, bb.capacity() - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new FOBS().__assign(tableOffset, bb);
      }
    }
    return null;
  }
}

