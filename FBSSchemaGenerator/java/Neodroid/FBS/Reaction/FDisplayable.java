// automatically generated by the FlatBuffers compiler, do not modify

package Neodroid.FBS.Reaction;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FDisplayable extends Table {
  public static FDisplayable getRootAsFDisplayable(ByteBuffer _bb) { return getRootAsFDisplayable(_bb, new FDisplayable()); }
  public static FDisplayable getRootAsFDisplayable(ByteBuffer _bb, FDisplayable obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public FDisplayable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String displayableName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer displayableNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer displayableNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public byte displayableValueType() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Table displayableValue(Table obj) { int o = __offset(8); return o != 0 ? __union(obj, o) : null; }

  public static int createFDisplayable(FlatBufferBuilder builder,
      int displayable_nameOffset,
      byte displayable_value_type,
      int displayable_valueOffset) {
    builder.startObject(3);
    FDisplayable.addDisplayableValue(builder, displayable_valueOffset);
    FDisplayable.addDisplayableName(builder, displayable_nameOffset);
    FDisplayable.addDisplayableValueType(builder, displayable_value_type);
    return FDisplayable.endFDisplayable(builder);
  }

  public static void startFDisplayable(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addDisplayableName(FlatBufferBuilder builder, int displayableNameOffset) { builder.addOffset(0, displayableNameOffset, 0); }
  public static void addDisplayableValueType(FlatBufferBuilder builder, byte displayableValueType) { builder.addByte(1, displayableValueType, 0); }
  public static void addDisplayableValue(FlatBufferBuilder builder, int displayableValueOffset) { builder.addOffset(2, displayableValueOffset, 0); }
  public static int endFDisplayable(FlatBufferBuilder builder) {
    int o = builder.endObject();
    builder.required(o, 4);  // displayable_name
    return o;
  }

  @Override
  protected int keysCompare(Integer o1, Integer o2, ByteBuffer _bb) { return compareStrings(__offset(4, o1, _bb), __offset(4, o2, _bb), _bb); }

  public static FDisplayable __lookup_by_key(FDisplayable obj, int vectorLocation, String key, ByteBuffer bb) {
    byte[] byteKey = key.getBytes(Table.UTF8_CHARSET.get());
    int span = bb.getInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = __indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = compareStrings(__offset(4, bb.capacity() - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return (obj == null ? new FDisplayable() : obj).__assign(tableOffset, bb);
      }
    }
    return null;
  }
}

