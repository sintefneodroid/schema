// automatically generated by the FlatBuffers compiler, do not modify

package Neodroid.FBS.Reaction;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FReaction extends Table {
  public static FReaction getRootAsFReaction(ByteBuffer _bb) { return getRootAsFReaction(_bb, new FReaction()); }
  public static FReaction getRootAsFReaction(ByteBuffer _bb, FReaction obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean FReactionBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "REAC"); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public FReaction __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String environmentName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer environmentNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer environmentNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public FReactionParameters parameters() { return parameters(new FReactionParameters()); }
  public FReactionParameters parameters(FReactionParameters obj) { int o = __offset(6); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public FMotion motions(int j) { return motions(new FMotion(), j); }
  public FMotion motions(FMotion obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int motionsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public FMotion motionsByKey(String key) { int o = __offset(8); return o != 0 ? FMotion.__lookup_by_key(null, __vector(o), key, bb) : null; }
  public FMotion motionsByKey(FMotion obj, String key) { int o = __offset(8); return o != 0 ? FMotion.__lookup_by_key(obj, __vector(o), key, bb) : null; }
  public FDisplayable displayables(int j) { return displayables(new FDisplayable(), j); }
  public FDisplayable displayables(FDisplayable obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int displayablesLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public FDisplayable displayablesByKey(String key) { int o = __offset(10); return o != 0 ? FDisplayable.__lookup_by_key(null, __vector(o), key, bb) : null; }
  public FDisplayable displayablesByKey(FDisplayable obj, String key) { int o = __offset(10); return o != 0 ? FDisplayable.__lookup_by_key(obj, __vector(o), key, bb) : null; }
  public Neodroid.FBS.FUnobservables unobservables() { return unobservables(new Neodroid.FBS.FUnobservables()); }
  public Neodroid.FBS.FUnobservables unobservables(Neodroid.FBS.FUnobservables obj) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public FConfiguration configurations(int j) { return configurations(new FConfiguration(), j); }
  public FConfiguration configurations(FConfiguration obj, int j) { int o = __offset(14); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int configurationsLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public FConfiguration configurationsByKey(String key) { int o = __offset(14); return o != 0 ? FConfiguration.__lookup_by_key(null, __vector(o), key, bb) : null; }
  public FConfiguration configurationsByKey(FConfiguration obj, String key) { int o = __offset(14); return o != 0 ? FConfiguration.__lookup_by_key(obj, __vector(o), key, bb) : null; }
  public String serialisedMessage() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer serialisedMessageAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer serialisedMessageInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }

  public static void startFReaction(FlatBufferBuilder builder) { builder.startObject(7); }
  public static void addEnvironmentName(FlatBufferBuilder builder, int environmentNameOffset) { builder.addOffset(0, environmentNameOffset, 0); }
  public static void addParameters(FlatBufferBuilder builder, int parametersOffset) { builder.addStruct(1, parametersOffset, 0); }
  public static void addMotions(FlatBufferBuilder builder, int motionsOffset) { builder.addOffset(2, motionsOffset, 0); }
  public static int createMotionsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMotionsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDisplayables(FlatBufferBuilder builder, int displayablesOffset) { builder.addOffset(3, displayablesOffset, 0); }
  public static int createDisplayablesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDisplayablesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addUnobservables(FlatBufferBuilder builder, int unobservablesOffset) { builder.addOffset(4, unobservablesOffset, 0); }
  public static void addConfigurations(FlatBufferBuilder builder, int configurationsOffset) { builder.addOffset(5, configurationsOffset, 0); }
  public static int createConfigurationsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startConfigurationsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSerialisedMessage(FlatBufferBuilder builder, int serialisedMessageOffset) { builder.addOffset(6, serialisedMessageOffset, 0); }
  public static int endFReaction(FlatBufferBuilder builder) {
    int o = builder.endObject();
    builder.required(o, 4);  // environment_name
    builder.required(o, 6);  // parameters
    return o;
  }
  public static void finishFReactionBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "REAC"); }
  public static void finishSizePrefixedFReactionBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "REAC"); }

  @Override
  protected int keysCompare(Integer o1, Integer o2, ByteBuffer _bb) { return compareStrings(__offset(4, o1, _bb), __offset(4, o2, _bb), _bb); }

  public static FReaction __lookup_by_key(FReaction obj, int vectorLocation, String key, ByteBuffer bb) {
    byte[] byteKey = key.getBytes(Table.UTF8_CHARSET.get());
    int span = bb.getInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = __indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = compareStrings(__offset(4, bb.capacity() - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return (obj == null ? new FReaction() : obj).__assign(tableOffset, bb);
      }
    }
    return null;
  }
}

