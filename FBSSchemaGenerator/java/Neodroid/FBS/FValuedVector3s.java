// automatically generated by the FlatBuffers compiler, do not modify

package Neodroid.FBS;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FValuedVector3s extends Table {
  public static FValuedVector3s getRootAsFValuedVector3s(ByteBuffer _bb) { return getRootAsFValuedVector3s(_bb, new FValuedVector3s()); }
  public static FValuedVector3s getRootAsFValuedVector3s(ByteBuffer _bb, FValuedVector3s obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public FValuedVector3s __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double vals(int j) { int o = __offset(4); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int valsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer valsAsByteBuffer() { return __vector_as_bytebuffer(4, 8); }
  public FVector3 points(int j) { return points(new FVector3(), j); }
  public FVector3 points(FVector3 obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o) + j * 24, bb) : null; }
  public int pointsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }

  public static int createFValuedVector3s(FlatBufferBuilder builder,
      int valsOffset,
      int pointsOffset) {
    builder.startObject(2);
    FValuedVector3s.addPoints(builder, pointsOffset);
    FValuedVector3s.addVals(builder, valsOffset);
    return FValuedVector3s.endFValuedVector3s(builder);
  }

  public static void startFValuedVector3s(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addVals(FlatBufferBuilder builder, int valsOffset) { builder.addOffset(0, valsOffset, 0); }
  public static int createValsVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startValsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addPoints(FlatBufferBuilder builder, int pointsOffset) { builder.addOffset(1, pointsOffset, 0); }
  public static void startPointsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(24, numElems, 8); }
  public static int endFValuedVector3s(FlatBufferBuilder builder) {
    int o = builder.endObject();
    builder.required(o, 4);  // vals
    builder.required(o, 6);  // points
    return o;
  }
}

